generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  
  // Profile fields
  hasDeposited Boolean @default(false)
  hasTraded    Boolean @default(false)
  signupBonus  Float   @default(0.002)
  
  // KYC fields
  kycStatus    KycStatus @default(PENDING)
  kycLevel     Int       @default(0)
  
  // Security
  twoFactorEnabled Boolean @default(false)
  lastLogin        DateTime?
  
  // Relations
  wallets      Wallet[]
  transactions Transaction[]
  referrals    Referral[]
  kycDocuments KycDocument[]
  securityLogs SecurityLog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  asset    String
  balance  Float  @default(0)
  locked   Float  @default(0)
  usdPrice Float  @default(0)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, asset])
}

model Transaction {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  type        TransactionType
  asset       String
  amount      Float
  fee         Float             @default(0)
  status      TransactionStatus @default(PENDING)
  description String?
  
  // Transaction specific fields
  fromAddress String?
  toAddress   String?
  txHash      String?
  blockHeight Int?
  
  // Risk assessment
  riskScore   Float @default(0)
  riskFlags   String[]
  
  // Admin fields
  reviewedBy  String?
  reviewedAt  DateTime?
  notes       String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KycDocument {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String    @db.ObjectId
  type     String
  status   KycStatus @default(PENDING)
  fileUrl  String
  notes    String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referral {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  referrerId   String @db.ObjectId
  referredId   String @db.ObjectId
  code         String @unique
  commission   Float  @default(0)
  isActive     Boolean @default(true)
  
  referrer User @relation(fields: [referrerId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecurityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  action    String
  ip        String?
  userAgent String?
  success   Boolean
  details   Json?
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}

model MarketData {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  symbol   String @unique
  price    Float
  change   String
  volume   String
  isUp     Boolean
  
  updatedAt DateTime @updatedAt @default(now())
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRADE
  BONUS
  FEE
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REJECTED
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}
